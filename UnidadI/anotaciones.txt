Programación Orientada a Objetos
Paradigma de programación que utiliza objetos para todas sus interacciones.

Pilares de la Programación Orientada a Objetos
*Abstracción: Es utilizar alguna funcionalidad de una clase sin necesidad de saber como funciona internamente. Nos abstraemos de su funcionalidad.

*Encapsulación: Permite proteger atributos/metodos internos de una clase para evitar modificaciones/llamados erroneas o no intencionales. Para lograrlo se puede utilizar modificadores de acceso los cuales son:
    default: Tecnicamente no se escribe, un atributo/metodo con este modificador puede ser accedido desde cualquier otra clase que este en el mismo paquete.

    public: Con este modificador se puede acceder a un atributo/metodo desde cualquier clase aunque no esten en el mismo paquete. En un archivo .java solo puede existir una clase publica pero pueden existir muchas privadas

    private: Con este modificador solo se puede acceder a un atributo/metodo dentro de la misma clase. Este modificador se utiliza para aplicar el concepto de encapsulación. Tecnicamente se aplica definiendo los atributos como privados y acceder/modificar sus valores utilizando metodos publicos conocidos como set y get

    protected: Se verá hasta el tema de herencia.

*Herencia

*Polimorfismo





Constructores:
    Es un metodo con exactamente el mismo nombre de la clase.
    Es el primer metodo que se ejecuta al instanciar una clase.
    Si no se crea un constructor, Java crea uno vacio automaticamente.
    El constructor no debe retornar ningun valor, incluso void.
    Debe ser un metodo publico
    Puede estar sobrecargado.
    Usualmente se utiliza para inicializar atributos internos de la clase u otro tipo de variable.