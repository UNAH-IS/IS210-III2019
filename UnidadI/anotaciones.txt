Programación Orientada a Objetos
Paradigma de programación que utiliza objetos para todas sus interacciones.

Pilares de la Programación Orientada a Objetos
*Abstracción: Es utilizar alguna funcionalidad de una clase sin necesidad de saber como funciona internamente. Nos abstraemos de su funcionalidad.

*Encapsulación: Permite proteger atributos/metodos internos de una clase para evitar modificaciones/llamados erroneas o no intencionales. Para lograrlo se puede utilizar modificadores de acceso los cuales son:
    default: Tecnicamente no se escribe, un atributo/metodo con este modificador puede ser accedido desde cualquier otra clase que este en el mismo paquete.

    public: Con este modificador se puede acceder a un atributo/metodo desde cualquier clase aunque no esten en el mismo paquete. En un archivo .java solo puede existir una clase publica pero pueden existir muchas privadas

    private: Con este modificador solo se puede acceder a un atributo/metodo dentro de la misma clase. Este modificador se utiliza para aplicar el concepto de encapsulación. Tecnicamente se aplica definiendo los atributos como privados y acceder/modificar sus valores utilizando metodos publicos conocidos como set y get

    protected: Permite acceder a un atributo/metodo desde la propia clase y desde clases hijas.

*Herencia: Es la funcionalidad que permite encapsular atributos y metodos en comun de un conjunto de clases bajo un mismo contexto. Esto permite al programador reutilizar codigo. De la estructura resultante surge una clase padre, super clase o clase base y de esta se extiende las clases hijas, subclase o clase derivada.

    Sobreescritura de metodos: volver a escribir la estructura de un metodo que estaba previamente definido en una clase padre, dicho metodo puede tener una funcionalidad completamente diferente a la de clase padre. Se puede colocar previamente la anotacion @Override para indicar que un metodo se esta sobreescribiendo.

*Polimorfismo: Poli=>Muchas, Morfismo=>Formas
En Java, un elemento puede tener la misma apariencia (nombre, tipo), pero puede tener funcionalidades diferentes.
Ejemplos de polimorfismo:
    Sobrecarga
    Sobreescritura
    Compatibilidad de clases





Constructores:
    Es un metodo con exactamente el mismo nombre de la clase.
    Es el primer metodo que se ejecuta al instanciar una clase.
    Si no se crea un constructor, Java crea uno vacio automaticamente.
    El constructor no debe retornar ningun valor, incluso void.
    Debe ser un metodo publico
    Puede estar sobrecargado.
    Usualmente se utiliza para inicializar atributos internos de la clase u otro tipo de variable.



 Colecciones: Son clases especiales en Java que utilizan conceptos de estructuras de datos, listas, arboles y similares para gestionar multiples objetos de forma dinamica.   Clases tipo coleccion:
        ArrayList
        List
        HashMap
        HashTable
        LinkedList
        ...


    
Ingresar Información:
    Consola (Scanner)
    Interfaces gráficas de usuario:
        AWT (Deprecado)
        Swing (Casi Deprecado):
            JOptionPane: Clase con métodos estaticos para utilizar cuadros de dialogo.
        JavaFX (Actual)

Modificador static: Se utiliza para poder acceder a un atributo/metodo sin crear una instancia, generalmente son publicos. Para acceder a ellos se utiliza el nombre de la clase:   
        NombreClase.nombreAtributo

Ademas comparte el mismo valor para cualquier objeto de dicho tipo.