 Clases Abstractas: Son clases que se utilizan para generalizar. Se utilizan como molde para otras clases, siendo estas por lo general clases padre.
 
 Caracteristicas:
 *Una clase abstracta puede tener muchos, uno o ningun metodo abstracto.
 *Un metodo abstracto es un metodo que no tiene cuerpo, solo se define, ademas es obligatorio redefinir dicho metodo abstracto en clases hijas. Si la clase tiene un metodo abstracto, la clase debe ser abstracta.
 *Para definir una clase como abstracta se utiliza la palabra reservada abstract antes de class.
 *Una clase abstracta noooooo se puede instanciar.


 Graphic User Interface
 AWT (Abstract Window Toolkit)
 Swing
 JavaFX (>7)


 Pasos para ejecutar una aplicacion con JavaFX desde IntelliJ
 1. Descargar JavaFX SDK
 2. Descomprimir las librerias de javaFX en algun directorio de su preferencia.
 3. En IntelliJ, click en File>Project Structure
 4. Click en Librerias y luego en el boton + (Agregar)
 5. Buscar la carpeta lib de JavaFX
 6. Click en Run>Edit Configurations
 7. Copiar la siguiente linea en la caja de texto VM Options: 

 --module-path ####RUTA DE SUS LIBRERIAS#### --add-modules=javafx.controls

 Pasos para ejecutar una aplicacion con JavaFX desde eclipse

 1. Help->Marketplace
 2. Escribir javafx en el buscador y luego instalar el paquete efxclipse
 3. Descargar JavaFX SDK
 4. Descomprimir las librerias de javaFX en algun directorio de su preferencia.
 5. Eclipse -> Window -> Preferences -> Java -> Build Path -> User Libraries -> New.
 6. Agregar un nombre descriptivo para las librerias, Ejemplo: JavaFXLib
 7. Add external JARs
 8. Agregar todos los archivos .jar del SDK descargado (carpeta lib)
 9. Apply and close
 10. Click derecho en el proyecto->propiedades->build path->Libraries
 11. Add Library->User Library y seleccionar la que se creo en el inciso 6
 12. Debera visualizarse la libreria en el proyecto.
 13. Run->Run Configurations->Arguments
 14. En el campo VM Arguments escribir lo siguiente

 --module-path ####RUTA DE SUS LIBRERIAS#### --add-modules=javafx.controls



 Eventos: Son acciones del usuario, ejemplo: presionar una tecla, mover el cursor, dar click, doble click, etc.


XML Xtensible Markup Language
Es un formato de intercambio de informacion. Es un estandar.

Organiza la información en etiquetas
Etiqueta:

    <etiqueta propiedad1="valor" propiedad2="valor2" ... propiedadN="valorN">
        Contenido de la etiqueta.
    </etiqueta>

XML:
<persona>
    <nombre>Juan</nombre>
    <apellido>Perez</apellido>
    <edad>44</edad>
    <fecha-nacimiento>
        <dia>22</dia>
        <mes>12</mes>
        <anio>1980</anio>
    </fecha-nacimiento>
</persona>

JSON:
persona = {
    nombre:'Juan',
    apellido:'Perez',
    edad:44,
    fechaNacimiento:{
        dia:22,
        mes:12,
        anio:1980
    }
}


En una aplicacion de JavaFX que utilice GUI en FXML se debe configurar el "Run Configurations" de la siguiente forma:

--module-path /home/marin/JavaFX/lib/ --add-modules=javafx.controls,javafx.fxml,javafx.base,javafx.media,javafx.web,javafx.swing



Patron ModeloVistaControlador (MVC):
Es un patron de desarrollo de software para segmentar los componentes de un aplicativo

Modelo: La logica de negocio, estructuras de datos, informacion.
        Estructura de clases, herencia, etc.
Vista: Interfaz gráfica de Usuario (GUI)
        Formularios, FXML
Controlador: Funcionalidad de los eventos y acciones de usuario.
        Clase controlador para gestionar eventos y comportamiento.


Interfaces (Esto no tiene nada que ver con GUI):
En programación orientada a objetos, una interfaz es una estructura de datos, muy similar a una clase abstracta. En algunas ocasiones es llamada clase abstracta pura y tiene las siguientes Caracteristicas:

1. Para declararse se utiliza la palabra reservada interface en vez de class.
2. Todos los metodos de una interfaz son abstractos.
3. No se pueden instanciar.
4. No tienen constructor.
5. Todos los atributos deben ser public static final.
6. Son aún más genericas que las clases abstractas.
7. Se utilizan para simular herencia multiple.
8. Para aplicar herencia entre clase(hija) e interfaz se utiliza la palabra reservada implements.
9. Para aplicar herencia entre interfaz e interfaz se utiliza la palabra reservada extends.
10. Se pueden utilizar multiples interfaces padre separadas por coma.
11. En Java, las interfaces se utilizan bastante para gestionar eventos.